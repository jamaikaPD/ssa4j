#summary A quick start guide that demonstrates how to use SSA4J annotations

== Introduction ==
This tutorial assumes that you already have a working knowledge of the core concepts of [http://community.screen-scraper.com/documentation screen-scraper].  It expands on [http://community.screen-scraper.com/Tutorial_4_Page_1 Tutorial 4: Scraping an E-commerce Site from External Programs] to demonstrate how SSA4J is used to create an API that is easier to use and more consistent with Java.

== Scraping From an External Java Program (a.k.a The "Old Way")  ==

Before proceeding it would be a good idea to go through [http://community.screen-scraper.com/Tutorial_2_page_1 Tutorial 2], if you haven't done so already.

*NOTE* If you haven't gone through [http://community.screen-scraper.com/Tutorial_2_page_1 Tutorial 2], or don't still have the scraping session you created in it, you can download it [http://community.screen-scraper.com/files/Shopping%20Site%20(Scraping%20Session).sss here] and [http://community.screen-scraper.com/importing_and_exporting_objects import] it into screen-scraper. 

... ok, now let's review how we [http://community.screen-scraper.com/invoking_screen-scraper_from_Java Invoking screen-scraper from Java] in a world without SSA4J.

{{{
// Generate a RemoteScrapingSession object, which 
// acts as the driver, or interface, to screen-scraper.
// If you're running screen-scraper on a different computer 
// than the one the Java file resides on you'll want to 
// modify and use the top version instead of the bottom one.
RemoteScrapingSession remoteScrapingSession = new RemoteScrapingSession("Shopping Site");
remoteScrapingSession.setVariable( "PAGE", "1" );

// Set the variables.
// Remember that these two top variables correspond to the POST
// parameters we use for the "Login" scrapeable file.
remoteScrapingSession.setVariable( "EMAIL_ADDRESS", "test@test.com" );
remoteScrapingSession.setVariable( "PASSWORD", "testing" );

// screen-scraper will use this parameter to search the products.
remoteScrapingSession.setVariable("SEARCH","dvd");

// We start screen-scraper at page 1 of the search results.
// Note that we could have also done this in an "initialize" 
// script within screen-scraper, which is common.
remoteScrapingSession.setVariable( "PAGE", "1" );

// Tell the session to scrape. This method call might take
// a little while since it will need to wait for screen-scraper
// to fully extract the data before it returns.
remoteScrapingSession.scrape();

// Get the data set that was stored by screen-scraper in a
// session variable. This data set corresponds to the "PRODUCTS"
// extractor pattern found under the "Details page" scrapeable
// file.
DataSet products = ( DataSet )remoteScrapingSession.getVariable( "PRODUCTS" );

// Iterate through each of the data records screen-scraper
// extracted, outputting each of them to the browser.
for( int i = 0; i < products.getNumDataRecords(); i++ )
{
    DataRecord product = products.getDataRecord( i );
    System.out.println( "=======================================" );
    System.out.println( "Product #" + i );
    System.out.println( "Title: " + product.get( "TITLE" ) );
    System.out.println( "Model: " + product.get( "MODEL" ) );
    System.out.println( "Shipping Weight: " + product.get( "SHIPPING_WEIGHT" ) );
    System.out.println( "Manufactured By: " + product.get( "MANUFACTURED_BY" ) );
    System.out.println( "=======================================" );
}

// Be sure to disconnect from the server.
remoteScrapingSession.disconnect();

}}}


Now, the above code isn't all that bad, but the drawbacks are what make creating a formal API around a "scraper" extremely tedious.  Take for example all the examples of `remoteScrapingSession.setVariable(...)`.  In the above example there are at least four values that must be set (e.g. EMAIL_ADDRESS, PASSWORD, SEARCH, and PAGE). 

Additionally, having to know all the String literal values for every !DataRecord is extremely difficult to manage, even if you use a constants file to managed all the keys. 

== 3 Steps to SSA4J Bliss ==
The process of creating a proper Java API for a scrape session using SSA4J can be accomplished with 3 easy steps:

  # Create and Annotate a Class for your !ScrapeSession and within it define all the variables and datasets
  # Create and Annotate a Class for each !DataRecord you expect to find in a session's !DataSet
  # Create and use and instance of ScrapeSessionManager and pass it your annotated Scrape Session class to invoke screen-scraper 


If we wanted to create a proper API for the scrape session described above we would likely want to create a Class called `ShoppingSiteScrapingSession` that contained explicit getters and setters for each of the session variables (e.g. setEmailAddress(), setPassword(), etc.).

=== Create A Class to Represent the Shopping Site Scrape Session ===


{{{
public class ShoppingSiteScrapingSession {
	private String emailAddress;
	private String password;
	private String search;
	private int page;
	
	// getters and setters here ... 
}
}}}